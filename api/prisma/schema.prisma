// database schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String    
  name      String
  username  String
  contacts  String
  auth      String    @default("READER")
  profile   String?

  comments  Comment[]
  requests  Request[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  books     Book[]
}

model Book {
  id          Int       @id @default(autoincrement())
  title       String
  cover       String?   
  rating      Int       @default(0)
  status      String    @default("Available")
  description String?    

  author      Author?   @relation(fields: [authorId], references: [id])    
  authorId    Int?

  category    Category? @relation(fields: [categoryId], references: [id]) 
  categoryId  Int?

  comments    Comment[]
  requests    Request[]
  
  available   Int       @default(0)
  total       Int       @default(0)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Author {
  id        Int       @id @default(autoincrement())
  name      String

  books     Book[]
}

model Comment {
  id        Int       @id @default(autoincrement())
  text      String

  user      User      @relation(fields: [userId], references: [id])
  userId    Int

  book      Book      @relation(fields: [bookId], references: [id])
  bookId    Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Request {
  id        Int       @id @default(autoincrement())

  book      Book      @relation(fields: [bookId], references: [id])
  bookId    Int

  reader    User      @relation(fields: [readerId], references: [id])
  readerId  Int

  status    String    @default("PENDING")
  managedBy String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  due       DateTime?
  borrowed  DateTime?
}